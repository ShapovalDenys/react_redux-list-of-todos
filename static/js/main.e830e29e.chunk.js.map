{"version":3,"sources":["store/index.ts","API.ts","User.tsx","Todo.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["finishLoading","message","todos","type","setSortField","sortField","isLoading","state","loading","getMessage","getVisibleTodos","visibleTodos","sortReverse","sort","a","b","title","localeCompare","user","name","completed","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","API_URL","User","className","Todo","dispatch","useDispatch","classNames","onClick","TodoList","map","key","App","useSelector","getTodosFromServer","Promise","all","fetch","then","response","json","todosFromServer","usersFromServer","preparedTodos","find","userId","role","length","data","catch","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e830e29e.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_FIELD = 'SORT_FIELD';\n\nexport const BY_TITLE = 'byTitle';\nexport const BY_NAME = 'byName';\nexport const BY_COMPLETED = 'byCompleted';\nconst DELETE_TODO = 'delete';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message', todos = []) => ({\n  type: FINISH_LOADING,\n  message,\n  todos,\n});\nexport const setSortField = (sortField: string) => ({\n  type: SORT_FIELD,\n  sortField,\n});\n\nexport const deleteTodo = (id: number) => ({\n  type: DELETE_TODO,\n  id,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortField = (state: RootState) => state.sortField;\nexport const getVisibleTodos = (state: RootState) => {\n  const visibleTodos = [...state.todos];\n\n  switch (state.sortField) {\n    case BY_TITLE:\n      state.sortReverse\n        ? visibleTodos.sort((a: TodoProps, b: TodoProps) => (a.title.localeCompare(b.title)))\n        : visibleTodos.sort((a: TodoProps, b: TodoProps) => (b.title.localeCompare(a.title)));\n      break;\n    case BY_NAME:\n      state.sortReverse\n        ? visibleTodos.sort((a: TodoProps, b: TodoProps) => (a.user.name.localeCompare(b.user.name)))\n        : visibleTodos.sort((a: TodoProps, b: TodoProps) => (b.user.name.localeCompare(a.user.name)));\n      break;\n    case BY_COMPLETED:\n      state.sortReverse\n        ? visibleTodos.sort((a: TodoProps, b: TodoProps) => (+b.completed - +a.completed))\n        : visibleTodos.sort((a: TodoProps, b: TodoProps) => (+a.completed - +b.completed));\n      break;\n    default: return visibleTodos;\n  }\n\n  return visibleTodos;\n};\n\n// Initial state\nexport type RootState = {\n  todos: TodoProps[];\n  loading: boolean;\n  message: string;\n  sortField: string;\n  sortReverse: boolean;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  message: '',\n  sortField: BY_TITLE,\n  sortReverse: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n        todos: action.todos,\n      };\n\n    case SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.sortField,\n        sortReverse: !state.sortReverse,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport const getTODOs = () => {\n  return fetch(`${API_URL}/todos.json`)\n    .then(response => response.json());\n};\n\nexport const getUsers = () => {\n  return fetch(`${API_URL}/users.json`)\n    .then(response => response.json());\n};\n","import React from 'react';\n\ntype Props = {\n  user: UserProps;\n};\n\nconst User: React.FC<Props> = ({ user }) => {\n  return (\n    <div className=\"names\">\n      <p className=\"article\">\n        Name:\n        {user.name}\n      </p>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport User from './User';\nimport { deleteTodo } from './store/index';\n\ntype Props = {\n  todo: TodoProps;\n};\n\nconst Todo: React.FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={classNames('card', 'text-white', 'mb-3', 'gg', { 'bg-success': todo.completed, 'bg-danger': !todo.completed })}>\n      <div className=\"card-header\">{todo.title}</div>\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{todo.completed ? <p>Status: completed</p> : <p>Status: not completed</p>}</h5>\n        <div className=\"card-text\"><User user={todo.user} /></div>\n        <button className=\"delete-button\" type=\"button\" onClick={() => dispatch(deleteTodo(todo.id))}>x</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\ntype Props = {\n  todos: TodoProps[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => (\n  <div>\n    <ul className=\"list\">\n      {todos.map((todo: TodoProps) => (\n        <Todo todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  </div>\n);\n\nexport default TodoList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './App.scss';\nimport { getTODOs, getUsers } from './API';\nimport TodoList from './TodoList';\nimport {\n  isLoading, getMessage, startLoading, finishLoading, setSortField, getVisibleTodos,\n} from './store';\nimport * as constants from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n  const todos = useSelector(getVisibleTodos);\n\n  const getTodosFromServer = async () => {\n    const [todosFromServer, usersFromServer] = await Promise.all(\n      [getTODOs(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo: TodoProps) => ({\n      ...todo,\n      user: usersFromServer.find((user: UserProps) => user.id === todo.userId),\n    }));\n\n    return preparedTodos;\n  };\n\n  const loadGoods = () => {\n    dispatch(startLoading());\n\n    getTodosFromServer()\n      .then((data) => dispatch(finishLoading('Load Sucsess!', data)))\n      .catch(() => dispatch(finishLoading('Load Error')));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"display-5\">Redux list of todos</h1>\n      <h2>{loading ? <div className=\"spinner-border text-primary\" role=\"status\" /> : message}</h2>\n      <div className=\"buttons\">\n        {todos.length === 0\n          ? (\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={loadGoods}\n            >\n              Load ToDos\n            </button>\n          )\n          : (\n            <>\n              <button\n                className=\"btn btn-outline-primary mr\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(constants.BY_TITLE))}\n              >\n                Sort by Title\n              </button>\n\n              <button\n                className=\"btn btn-outline-success mr\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(constants.BY_COMPLETED))}\n              >\n                Sort by Status\n              </button>\n\n              <button\n                className=\"btn btn-outline-info\"\n                type=\"button\"\n                onClick={() => dispatch(setSortField(constants.BY_NAME))}\n              >\n                Sort by Name\n              </button>\n            </>\n          )}\n      </div>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}